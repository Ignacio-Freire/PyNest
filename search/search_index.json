{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>PyNest is a Python framework built on top of FastAPI that follows the modular architecture of NestJS. It is designed to help structure your APIs in an intuitive, easy to understand, and enjoyable way.</p> <p>With PyNest, you can build scalable and maintainable APIs with ease. The framework supports dependency injection, type annotations, decorators, and code generation, making it easy to write clean and testable code.</p> <p>This framework is not a direct port of NestJS to Python but rather a re-imagining of the framework specifically for Python developers, including data scientists, data analysts, and data engineers. It aims to assist them in building better and faster APIs for their data applications.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#modular-architecture","title":"Modular Architecture","text":"<p>PyNest follows the modular architecture of NestJS, which allows for easy separation of concerns and code organization. Each module contains a collection of related controllers, services, and providers.</p>"},{"location":"#dependency-injection","title":"Dependency Injection","text":"<p>PyNest supports dependency injection, which makes it easy to manage dependencies and write testable code. You can easily inject services and providers into your controllers using decorators.</p>"},{"location":"#decorators","title":"Decorators","text":"<p>PyNest makes extensive use of decorators to define routes, middleware, and other application components. This helps keep the code concise and easy to read.</p>"},{"location":"#type-annotations","title":"Type Annotations","text":"<p>PyNest leverages Python's type annotations to provide better tooling and help prevent errors. You can annotate your controllers, services, and providers with types to make your code more robust.</p>"},{"location":"#code-generation","title":"Code Generation","text":"<p>PyNest includes a code generation tool that can create boilerplate code for modules, controllers, and other components. This saves you time and helps you focus on writing the code that matters.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#credits","title":"Credits","text":"<p>NestJS, a framework for building Node.js applications.</p> <p>FastAPI, a framework for building Python applications.</p>"},{"location":"installation/","title":"Getting Started","text":""},{"location":"installation/#getting-started","title":"Getting Started","text":"<p>To get started with PyNest, you'll need to install it using pip:</p> <pre><code>pip install py-nest\n</code></pre>"},{"location":"installation/#start-with-cli","title":"Start with cli","text":"<pre><code>nest create-nest-app -n my_app_name\n</code></pre> <p>once you have created your app, you can run it with the following command:</p> <pre><code>cd my_app_name &amp;&amp; uvicorn \"app:app\" --host \"0.0.0.0\" --port \"80\" --reload\n</code></pre> <p>Now you can visit openai-docs in your browser to see the default API documentation.</p>"},{"location":"installation/#adding-modules","title":"Adding modules","text":"<p>To add a new module to your application, you can use the nest generate module command:</p> <pre><code>nest generate-module -n users\n</code></pre> <p>This will create a new module called users in your application.</p> <p>You can then start defining routes and other application components using decorators and other PyNest constructs. For more information on how to use PyNest, check out the official documentation at https://github.com/PyNest.</p>"},{"location":"installation/#starting-a-new-project-manually","title":"Starting a new project manually","text":"<p>To start a new project manually, you'll need to create a project that follows this structure:</p> <pre><code>\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 orm_config.py\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 src\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 products\n\u2502    \u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u2502    \u251c\u2500\u2500 products_controller.py\n\u2502    \u2502    \u251c\u2500\u2500 products_service.py\n\u2502    \u2502    \u251c\u2500\u2500 products_model.py\n\u2502    \u251c\u2500\u2500  \u251c\u2500\u2500 products_entity.py\n\u2502    \u251c\u2500\u2500  \u251c\u2500\u2500 products_module.py\n</code></pre> <pre><code>HINT: for the following example, we will use the products module. \n</code></pre>"},{"location":"installation/#mainpy","title":"main.py","text":"<pre><code>import uvicorn\nif __name__ == '__main__':\nuvicorn.run(\n'app:app',\nhost=\"0.0.0.0\",\nport=80,\n)\n</code></pre>"},{"location":"installation/#apppy","title":"app.py","text":"<pre><code>from orm_config import config\nfrom nest.core import App\nfrom src.products.products_module import ProductsModule\napp = App(\ndescription=\"Your app description\",\nmodules=[\nProductsModule\n],\ninit_db=config.create_all\n)\n</code></pre>"},{"location":"installation/#orm_configpy","title":"orm_config.py","text":"<pre><code>from nest.core import OrmService\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\nconfig = OrmService(\ndb_type=\"your_db_type\",\nconfig_params=dict(\nuser=os.getenv(\"DB_USER\"),\npassword=os.getenv(\"DB_PASSWORD\"),\nhost=os.getenv(\"DB_HOST\"),\nport=os.getenv(\"DB_PORT\"),\ndatabase=os.getenv(\"DB_NAME\"),\n),\n)\n</code></pre> <p>Once we set up this 3 files, we can start creating our modules. each module is a folder with the following structure (I wil use the product module as an example):</p> <pre><code>\u251c\u2500\u2500 products\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 products_controller.py\n\u2502    \u251c\u2500\u2500 products_service.py\n\u2502    \u251c\u2500\u2500 products_model.py\n|    \u251c\u2500\u2500 products_entity.py\n\u2502    \u251c\u2500\u2500 products_module.py\n</code></pre>"},{"location":"installation/#products_modelpy","title":"products_model.py","text":"<pre><code>from pydantic import BaseModel\nclass Product(BaseModel):\nname: str\nprice: float\ndescription: str\n</code></pre>"},{"location":"installation/#products_entitypy","title":"products_entity.py","text":"<pre><code>from sqlalchemy import Column, Integer, String, Float\nfrom orm_config import config\nclass Product(config.Base):\n__tablename__ = \"products\"\nid = Column(Integer, primary_key=True, index=True, autoincrement=True)\nname = Column(String)\nprice = Column(Float)\ndescription = Column(String)\n</code></pre>"},{"location":"installation/#products_servicepy","title":"products_service.py","text":"<pre><code>from src.products.products_model import Product\nfrom src.products.products_entity import Product as ProductEntity\nfrom orm_config import config\nfrom nest.core.decorators import db_request_handler\nclass ProductsService:\ndef __init__(self):\nself.config = config\nself.session = self.config.get_db()\n@db_request_handler\ndef add_product(self, product: Product):\nproduct_entity = ProductEntity(\nname=product.name,\nprice=product.price,\ndescription=product.description\n)\nself.session.add(product_entity)\nself.session.commit()\nreturn product_entity.id\n@db_request_handler\ndef get_products(self):\nreturn self.session.query(ProductEntity).all()\n@db_request_handler\ndef get_product(self, product_id: int):\nreturn self.session.query(ProductEntity).filter(ProductEntity.id == product_id).first()\n@db_request_handler\ndef last_product(self):\nreturn self.session.query(ProductEntity).order_by(ProductEntity.id.desc()).first()\n</code></pre>"},{"location":"installation/#products_controllerpy","title":"products_controller.py","text":"<pre><code>from nest.core import Depends, Controller, Get, Post\nfrom src.products.products_service import ProductsService\nfrom src.products.products_model import Product\n@Controller(\"products\")\nclass ProductsController:\nservice: ProductsService = Depends(ProductsService)\n@Get(\"/get_products\")\ndef get_products(self):\nreturn self.service.get_products()\n@Get(\"/get_product/{product_id}\")\ndef get_product(self, product_id: int):\nreturn self.service.get_product(product_id)\n@Post(\"/add_product\")\ndef add_product(self, product: Product):\nreturn self.service.add_product(product)\n@Get(\"/last_product\")\ndef last_product(self):\nreturn self.service.last_product()\n</code></pre>"},{"location":"installation/#products_modulepy","title":"products_module.py","text":"<pre><code>from src.products.products_controller import ProductsController\nfrom src.products.products_service import ProductsService\nclass ProductsModule:\ndef __init__(self):\nself.providers = [ProductsService]\nself.controllers = [ProductsController]\n</code></pre> <p>This 5 components are the minimum required to create a module that works with the ORM. There are many more options of how you can design your modules and which databases you can use, but this is the default basic structure.</p>"},{"location":"license/","title":"License","text":"<p>PyNest is MIT licensed.</p>"}]}