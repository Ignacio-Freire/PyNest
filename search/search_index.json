{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>PyNest is a Python framework built on top of FastAPI that follows the modular architecture of NestJS. It is designed to help structure your APIs in an intuitive, easy to understand, and enjoyable way.</p> <p>With PyNest, you can build scalable and maintainable APIs with ease. The framework supports dependency injection, type annotations, decorators, and code generation, making it easy to write clean and testable code.</p> <p>This framework is not a direct port of NestJS to Python but rather a re-imagining of the framework specifically for Python developers, including data scientists, data analysts, and data engineers. It aims to assist them in building better and faster APIs for their data applications.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#modular-architecture","title":"Modular Architecture","text":"<p>PyNest follows the modular architecture of NestJS, which allows for easy separation of concerns and code organization. Each module contains a collection of related controllers, services, and providers.</p>"},{"location":"#dependency-injection","title":"Dependency Injection","text":"<p>PyNest supports dependency injection, which makes it easy to manage dependencies and write testable code. You can easily inject services and providers into your controllers using decorators.</p>"},{"location":"#decorators","title":"Decorators","text":"<p>PyNest makes extensive use of decorators to define routes, middleware, and other application components. This helps keep the code concise and easy to read.</p>"},{"location":"#type-annotations","title":"Type Annotations","text":"<p>PyNest leverages Python's type annotations to provide better tooling and help prevent errors. You can annotate your controllers, services, and providers with types to make your code more robust.</p>"},{"location":"#code-generation","title":"Code Generation","text":"<p>PyNest includes a code generation tool that can create boilerplate code for modules, controllers, and other components. This saves you time and helps you focus on writing the code that matters.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#credits","title":"Credits","text":"<p>NestJS, a framework for building Node.js applications.</p> <p>FastAPI, a framework for building Python applications.</p>"},{"location":"api/","title":"Api References","text":""},{"location":"api/#app","title":"App","text":"<p>         Bases: <code>FastAPI</code></p> <p>Custom FastAPI application class.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>The description of the application.</p> required <code>modules</code> <code>List</code> <p>A list of modules to register.</p> required <code>init_db</code> <code>Callable</code> <p>A callable function to initialize the database. Defaults to None.</p> <code>None</code> Source code in <code>nest/core/app.py</code> <pre><code>class App(FastAPI):\n\"\"\"\n    Custom FastAPI application class.\n    Args:\n        description (str): The description of the application.\n        modules (List): A list of modules to register.\n        init_db (Callable, optional): A callable function to initialize the database. Defaults to None.\n    \"\"\"\ndef __init__(self, description: str, modules: List, init_db: Callable = None):\n\"\"\"\n        Initializes the App instance.\n        Args:\n            description (str): The description of the application.\n            modules (List): A list of modules to register.\n            init_db (Callable, optional): A callable function to initialize the database. Defaults to None.\n        \"\"\"\nsuper().__init__(description=description)\nself.modules = modules\nself._register_controllers()\nif init_db:\ninit_db()\ndef _register_controllers(self):\n\"\"\"\n        Registers the controllers from the provided modules.\n        \"\"\"\nfor module in self.modules:\nmodule_instance = module()\nfor controller in module_instance.controllers:\nrouter: APIRouter = controller.get_router()\nself.include_router(router)\n</code></pre>"},{"location":"api/#nest.core.app.App.__init__","title":"<code>__init__(description, modules, init_db=None)</code>","text":"<p>Initializes the App instance.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>The description of the application.</p> required <code>modules</code> <code>List</code> <p>A list of modules to register.</p> required <code>init_db</code> <code>Callable</code> <p>A callable function to initialize the database. Defaults to None.</p> <code>None</code> Source code in <code>nest/core/app.py</code> <pre><code>def __init__(self, description: str, modules: List, init_db: Callable = None):\n\"\"\"\n    Initializes the App instance.\n    Args:\n        description (str): The description of the application.\n        modules (List): A list of modules to register.\n        init_db (Callable, optional): A callable function to initialize the database. Defaults to None.\n    \"\"\"\nsuper().__init__(description=description)\nself.modules = modules\nself._register_controllers()\nif init_db:\ninit_db()\n</code></pre>"},{"location":"database/","title":"Database","text":""},{"location":"database/#nest.core.database.base_orm.OrmService","title":"<code>OrmService</code>","text":"<p>Provides an interface for working with an ORM (Object-Relational Mapping) service.</p> <p>Parameters:</p> Name Type Description Default <code>db_type</code> <code>str</code> <p>The type of database. Defaults to \"postgresql\".</p> <code>'postgresql'</code> <code>config_params</code> <code>dict</code> <p>Configuration parameters specific to the chosen database type.                             Defaults to None.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>Base</code> <p>The declarative base class for defining ORM models.</p> <code>config</code> <p>The configuration factory for the chosen database type.</p> <code>config_url</code> <p>The URL generated from the database configuration parameters.</p> <code>engine</code> <p>The SQLAlchemy engine for database connection.</p> Source code in <code>nest/core/database/base_orm.py</code> <pre><code>class OrmService:\n\"\"\"\n    Provides an interface for working with an ORM (Object-Relational Mapping) service.\n    Args:\n        db_type (str, optional): The type of database. Defaults to \"postgresql\".\n        config_params (dict, optional): Configuration parameters specific to the chosen database type.\n                                        Defaults to None.\n    Attributes:\n        Base: The declarative base class for defining ORM models.\n        config: The configuration factory for the chosen database type.\n        config_url: The URL generated from the database configuration parameters.\n        engine: The SQLAlchemy engine for database connection.\n    \"\"\"\ndef __init__(self, db_type: str = \"postgresql\", config_params: dict = None):\n\"\"\"\n        Initializes the OrmService instance.\n        Args:\n            db_type (str, optional): The type of database. Defaults to \"postgresql\".\n            config_params (dict, optional): Configuration parameters specific to the chosen database type.\n                                            Defaults to None.\n        \"\"\"\nself.Base = declarative_base()\nself.config = ConfigFactory(db_type=db_type).get_config()\nself.config_url = self.config(**config_params).get_engine_url()\nself.engine = create_engine(self.config_url)\ndef create_all(self):\n\"\"\"\n        Creates all the tables defined by the ORM models.\n        Raises:\n            Exception: If there's an error creating the tables.\n        \"\"\"\nself.Base.metadata.create_all(bind=self.engine)\ndef drop_all(self):\n\"\"\"\n        Drops all the tables defined by the ORM models.\n        Raises:\n            Exception: If there's an error dropping the tables.\n        \"\"\"\nself.Base.metadata.drop_all(bind=self.engine)\ndef get_db(self) -&gt; Session:\n\"\"\"\n        Returns a SQLAlchemy Session object for database operations.\n        Returns:\n            Session: A SQLAlchemy Session object.\n        Raises:\n            Exception: If there's an error creating the session.\n        \"\"\"\ntry:\nsession = sessionmaker(bind=self.engine)\nreturn session()\nexcept Exception as e:\nraise e\n</code></pre>"},{"location":"database/#nest.core.database.base_orm.OrmService.__init__","title":"<code>__init__(db_type='postgresql', config_params=None)</code>","text":"<p>Initializes the OrmService instance.</p> <p>Parameters:</p> Name Type Description Default <code>db_type</code> <code>str</code> <p>The type of database. Defaults to \"postgresql\".</p> <code>'postgresql'</code> <code>config_params</code> <code>dict</code> <p>Configuration parameters specific to the chosen database type.                             Defaults to None.</p> <code>None</code> Source code in <code>nest/core/database/base_orm.py</code> <pre><code>def __init__(self, db_type: str = \"postgresql\", config_params: dict = None):\n\"\"\"\n    Initializes the OrmService instance.\n    Args:\n        db_type (str, optional): The type of database. Defaults to \"postgresql\".\n        config_params (dict, optional): Configuration parameters specific to the chosen database type.\n                                        Defaults to None.\n    \"\"\"\nself.Base = declarative_base()\nself.config = ConfigFactory(db_type=db_type).get_config()\nself.config_url = self.config(**config_params).get_engine_url()\nself.engine = create_engine(self.config_url)\n</code></pre>"},{"location":"database/#nest.core.database.base_orm.OrmService.create_all","title":"<code>create_all()</code>","text":"<p>Creates all the tables defined by the ORM models.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there's an error creating the tables.</p> Source code in <code>nest/core/database/base_orm.py</code> <pre><code>def create_all(self):\n\"\"\"\n    Creates all the tables defined by the ORM models.\n    Raises:\n        Exception: If there's an error creating the tables.\n    \"\"\"\nself.Base.metadata.create_all(bind=self.engine)\n</code></pre>"},{"location":"database/#nest.core.database.base_orm.OrmService.drop_all","title":"<code>drop_all()</code>","text":"<p>Drops all the tables defined by the ORM models.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there's an error dropping the tables.</p> Source code in <code>nest/core/database/base_orm.py</code> <pre><code>def drop_all(self):\n\"\"\"\n    Drops all the tables defined by the ORM models.\n    Raises:\n        Exception: If there's an error dropping the tables.\n    \"\"\"\nself.Base.metadata.drop_all(bind=self.engine)\n</code></pre>"},{"location":"database/#nest.core.database.base_orm.OrmService.get_db","title":"<code>get_db()</code>","text":"<p>Returns a SQLAlchemy Session object for database operations.</p> <p>Returns:</p> Name Type Description <code>Session</code> <code>Session</code> <p>A SQLAlchemy Session object.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there's an error creating the session.</p> Source code in <code>nest/core/database/base_orm.py</code> <pre><code>def get_db(self) -&gt; Session:\n\"\"\"\n    Returns a SQLAlchemy Session object for database operations.\n    Returns:\n        Session: A SQLAlchemy Session object.\n    Raises:\n        Exception: If there's an error creating the session.\n    \"\"\"\ntry:\nsession = sessionmaker(bind=self.engine)\nreturn session()\nexcept Exception as e:\nraise e\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.BaseOrmConfig","title":"<code>BaseOrmConfig</code>","text":"<p>Base abstract class for ORM (Object-Relational Mapping) configurations.</p> Source code in <code>nest/core/database/orm_config.py</code> <pre><code>class BaseOrmConfig:\n\"\"\"\n    Base abstract class for ORM (Object-Relational Mapping) configurations.\n    \"\"\"\n@abstractmethod\ndef get_engine_url(self) -&gt; str:\n\"\"\"\n        Returns the engine URL for the ORM.\n        Returns:\n            str: The engine URL.\n        \"\"\"\npass\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.BaseOrmConfig.get_engine_url","title":"<code>get_engine_url()</code>  <code>abstractmethod</code>","text":"<p>Returns the engine URL for the ORM.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The engine URL.</p> Source code in <code>nest/core/database/orm_config.py</code> <pre><code>@abstractmethod\ndef get_engine_url(self) -&gt; str:\n\"\"\"\n    Returns the engine URL for the ORM.\n    Returns:\n        str: The engine URL.\n    \"\"\"\npass\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.BaseOrmProvider","title":"<code>BaseOrmProvider</code>","text":"<p>         Bases: <code>BaseOrmConfig</code></p> <p>Base class for ORM providers that implement the BaseOrmConfig interface.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The database host.</p> required <code>db_name</code> <code>str</code> <p>The name of the database.</p> required <code>user</code> <code>str</code> <p>The username for database authentication.</p> required <code>password</code> <code>str</code> <p>The password for database authentication.</p> required <code>port</code> <code>int</code> <p>The database port number.</p> required Source code in <code>nest/core/database/orm_config.py</code> <pre><code>class BaseOrmProvider(BaseOrmConfig):\n\"\"\"\n    Base class for ORM providers that implement the BaseOrmConfig interface.\n    Args:\n        host (str): The database host.\n        db_name (str): The name of the database.\n        user (str): The username for database authentication.\n        password (str): The password for database authentication.\n        port (int): The database port number.\n    \"\"\"\ndef __init__(\nself,\nhost: str,\ndb_name: str,\nuser: str,\npassword: str,\nport: int\n):\n\"\"\"\n        Initializes the BaseOrmProvider instance.\n        Args:\n            host (str): The database host.\n            db_name (str): The name of the database.\n            user (str): The username for database authentication.\n            password (str): The password for database authentication.\n            port (int): The database port number.\n        \"\"\"\nself.host = host\nself.db_name = db_name\nself.user = user\nself.password = password\nself.port = port\ndef get_engine_url(self) -&gt; str:\n\"\"\"\n        Returns the engine URL for the ORM.\n        Returns:\n            str: The engine URL.\n        \"\"\"\npass\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.BaseOrmProvider.__init__","title":"<code>__init__(host, db_name, user, password, port)</code>","text":"<p>Initializes the BaseOrmProvider instance.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The database host.</p> required <code>db_name</code> <code>str</code> <p>The name of the database.</p> required <code>user</code> <code>str</code> <p>The username for database authentication.</p> required <code>password</code> <code>str</code> <p>The password for database authentication.</p> required <code>port</code> <code>int</code> <p>The database port number.</p> required Source code in <code>nest/core/database/orm_config.py</code> <pre><code>def __init__(\nself,\nhost: str,\ndb_name: str,\nuser: str,\npassword: str,\nport: int\n):\n\"\"\"\n    Initializes the BaseOrmProvider instance.\n    Args:\n        host (str): The database host.\n        db_name (str): The name of the database.\n        user (str): The username for database authentication.\n        password (str): The password for database authentication.\n        port (int): The database port number.\n    \"\"\"\nself.host = host\nself.db_name = db_name\nself.user = user\nself.password = password\nself.port = port\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.BaseOrmProvider.get_engine_url","title":"<code>get_engine_url()</code>","text":"<p>Returns the engine URL for the ORM.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The engine URL.</p> Source code in <code>nest/core/database/orm_config.py</code> <pre><code>def get_engine_url(self) -&gt; str:\n\"\"\"\n    Returns the engine URL for the ORM.\n    Returns:\n        str: The engine URL.\n    \"\"\"\npass\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.ConfigFactory","title":"<code>ConfigFactory</code>","text":"<p>Factory class for retrieving the appropriate ORM configuration based on the database type.</p> <p>Parameters:</p> Name Type Description Default <code>db_type</code> <code>str</code> <p>The type of database.</p> required Source code in <code>nest/core/database/orm_config.py</code> <pre><code>class ConfigFactory:\n\"\"\"\n    Factory class for retrieving the appropriate ORM configuration based on the database type.\n    Args:\n        db_type (str): The type of database.\n    \"\"\"\ndef __init__(self, db_type: str):\n\"\"\"\n        Initializes the ConfigFactory instance.\n        Args:\n            db_type (str): The type of database.\n        \"\"\"\nself.db_type = db_type\ndef get_config(self):\n\"\"\"\n        Returns the appropriate ORM configuration class based on the database type.\n        Returns:\n            class: The ORM configuration class.\n        Raises:\n            Exception: If the database type is not supported.\n        \"\"\"\nif self.db_type == \"postgresql\":\nreturn PostgresConfig\nelif self.db_type == \"mysql\":\nreturn MySQLConfig\nelif self.db_type == \"sqlite\":\nreturn SQLiteConfig\nelse:\nraise Exception(f\"Database type {self.db_type} is not supported\")\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.ConfigFactory.__init__","title":"<code>__init__(db_type)</code>","text":"<p>Initializes the ConfigFactory instance.</p> <p>Parameters:</p> Name Type Description Default <code>db_type</code> <code>str</code> <p>The type of database.</p> required Source code in <code>nest/core/database/orm_config.py</code> <pre><code>def __init__(self, db_type: str):\n\"\"\"\n    Initializes the ConfigFactory instance.\n    Args:\n        db_type (str): The type of database.\n    \"\"\"\nself.db_type = db_type\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.ConfigFactory.get_config","title":"<code>get_config()</code>","text":"<p>Returns the appropriate ORM configuration class based on the database type.</p> <p>Returns:</p> Name Type Description <code>class</code> <p>The ORM configuration class.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the database type is not supported.</p> Source code in <code>nest/core/database/orm_config.py</code> <pre><code>def get_config(self):\n\"\"\"\n    Returns the appropriate ORM configuration class based on the database type.\n    Returns:\n        class: The ORM configuration class.\n    Raises:\n        Exception: If the database type is not supported.\n    \"\"\"\nif self.db_type == \"postgresql\":\nreturn PostgresConfig\nelif self.db_type == \"mysql\":\nreturn MySQLConfig\nelif self.db_type == \"sqlite\":\nreturn SQLiteConfig\nelse:\nraise Exception(f\"Database type {self.db_type} is not supported\")\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.MySQLConfig","title":"<code>MySQLConfig</code>","text":"<p>         Bases: <code>BaseOrmProvider</code></p> <p>ORM configuration for MySQL.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The database host.</p> required <code>db_name</code> <code>str</code> <p>The name of the database.</p> required <code>user</code> <code>str</code> <p>The username for database authentication.</p> required <code>password</code> <code>str</code> <p>The password for database authentication.</p> required <code>port</code> <code>int</code> <p>The database port number.</p> required Source code in <code>nest/core/database/orm_config.py</code> <pre><code>class MySQLConfig(BaseOrmProvider):\n\"\"\"\n    ORM configuration for MySQL.\n    Args:\n        host (str): The database host.\n        db_name (str): The name of the database.\n        user (str): The username for database authentication.\n        password (str): The password for database authentication.\n        port (int): The database port number.\n    \"\"\"\ndef __init__(\nself,\nhost: str,\ndb_name: str,\nuser: str,\npassword: str,\nport: int\n):\n\"\"\"\n        Initializes the MySQLConfig instance.\n        Args:\n            host (str): The database host.\n            db_name (str): The name of the database.\n            user (str): The username for database authentication.\n            password (str): The password for database authentication.\n            port (int): The database port number.\n        \"\"\"\nsuper().__init__(host, db_name, user, password, port)\ndef get_engine_url(self) -&gt; str:\n\"\"\"\n        Returns the engine URL for the ORM.\n        Returns:\n            str: The engine URL.\n        \"\"\"\nreturn f'mysql+mysqlconnector://{self.user}:{self.password}@{self.host}'\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.MySQLConfig.__init__","title":"<code>__init__(host, db_name, user, password, port)</code>","text":"<p>Initializes the MySQLConfig instance.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The database host.</p> required <code>db_name</code> <code>str</code> <p>The name of the database.</p> required <code>user</code> <code>str</code> <p>The username for database authentication.</p> required <code>password</code> <code>str</code> <p>The password for database authentication.</p> required <code>port</code> <code>int</code> <p>The database port number.</p> required Source code in <code>nest/core/database/orm_config.py</code> <pre><code>def __init__(\nself,\nhost: str,\ndb_name: str,\nuser: str,\npassword: str,\nport: int\n):\n\"\"\"\n    Initializes the MySQLConfig instance.\n    Args:\n        host (str): The database host.\n        db_name (str): The name of the database.\n        user (str): The username for database authentication.\n        password (str): The password for database authentication.\n        port (int): The database port number.\n    \"\"\"\nsuper().__init__(host, db_name, user, password, port)\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.MySQLConfig.get_engine_url","title":"<code>get_engine_url()</code>","text":"<p>Returns the engine URL for the ORM.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The engine URL.</p> Source code in <code>nest/core/database/orm_config.py</code> <pre><code>def get_engine_url(self) -&gt; str:\n\"\"\"\n    Returns the engine URL for the ORM.\n    Returns:\n        str: The engine URL.\n    \"\"\"\nreturn f'mysql+mysqlconnector://{self.user}:{self.password}@{self.host}'\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.PostgresConfig","title":"<code>PostgresConfig</code>","text":"<p>         Bases: <code>BaseOrmProvider</code></p> <p>ORM configuration for PostgreSQL.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The database host.</p> required <code>db_name</code> <code>str</code> <p>The name of the database.</p> required <code>user</code> <code>str</code> <p>The username for database authentication.</p> required <code>password</code> <code>str</code> <p>The password for database authentication.</p> required <code>port</code> <code>int</code> <p>The database port number.</p> required Source code in <code>nest/core/database/orm_config.py</code> <pre><code>class PostgresConfig(BaseOrmProvider):\n\"\"\"\n    ORM configuration for PostgreSQL.\n    Args:\n        host (str): The database host.\n        db_name (str): The name of the database.\n        user (str): The username for database authentication.\n        password (str): The password for database authentication.\n        port (int): The database port number.\n    \"\"\"\ndef __init__(\nself,\nhost: str,\ndb_name: str,\nuser: str,\npassword: str,\nport: int\n):\n\"\"\"\n        Initializes the PostgresConfig instance.\n        Args:\n            host (str): The database host.\n            db_name (str): The name of the database.\n            user (str): The username for database authentication.\n            password (str): The password for database authentication.\n            port (int): The database port number.\n        \"\"\"\nsuper().__init__(host, db_name, user, password, port)\ndef get_engine_url(self) -&gt; str:\n\"\"\"\n        Returns the engine URL for the ORM.\n        Returns:\n            str: The engine URL.\n        \"\"\"\nreturn f'postgresql+psycopg2://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.PostgresConfig.__init__","title":"<code>__init__(host, db_name, user, password, port)</code>","text":"<p>Initializes the PostgresConfig instance.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The database host.</p> required <code>db_name</code> <code>str</code> <p>The name of the database.</p> required <code>user</code> <code>str</code> <p>The username for database authentication.</p> required <code>password</code> <code>str</code> <p>The password for database authentication.</p> required <code>port</code> <code>int</code> <p>The database port number.</p> required Source code in <code>nest/core/database/orm_config.py</code> <pre><code>def __init__(\nself,\nhost: str,\ndb_name: str,\nuser: str,\npassword: str,\nport: int\n):\n\"\"\"\n    Initializes the PostgresConfig instance.\n    Args:\n        host (str): The database host.\n        db_name (str): The name of the database.\n        user (str): The username for database authentication.\n        password (str): The password for database authentication.\n        port (int): The database port number.\n    \"\"\"\nsuper().__init__(host, db_name, user, password, port)\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.PostgresConfig.get_engine_url","title":"<code>get_engine_url()</code>","text":"<p>Returns the engine URL for the ORM.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The engine URL.</p> Source code in <code>nest/core/database/orm_config.py</code> <pre><code>def get_engine_url(self) -&gt; str:\n\"\"\"\n    Returns the engine URL for the ORM.\n    Returns:\n        str: The engine URL.\n    \"\"\"\nreturn f'postgresql+psycopg2://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.SQLiteConfig","title":"<code>SQLiteConfig</code>","text":"<p>         Bases: <code>BaseOrmConfig</code></p> <p>ORM configuration for SQLite.</p> <p>Parameters:</p> Name Type Description Default <code>db_name</code> <code>str</code> <p>The name of the SQLite database file.</p> required Source code in <code>nest/core/database/orm_config.py</code> <pre><code>class SQLiteConfig(BaseOrmConfig):\n\"\"\"\n    ORM configuration for SQLite.\n    Args:\n        db_name (str): The name of the SQLite database file.\n    \"\"\"\ndef __init__(self, db_name: str):\n\"\"\"\n        Initializes the SQLiteConfig instance.\n        Args:\n            db_name (str): The name of the SQLite database file.\n        \"\"\"\nself.db_name = db_name\ndef get_engine_url(self) -&gt; str:\n\"\"\"\n        Returns the engine URL for the ORM.\n        Returns:\n            str: The engine URL.\n        \"\"\"\nreturn f'sqlite:///{self.db_name}.db'\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.SQLiteConfig.__init__","title":"<code>__init__(db_name)</code>","text":"<p>Initializes the SQLiteConfig instance.</p> <p>Parameters:</p> Name Type Description Default <code>db_name</code> <code>str</code> <p>The name of the SQLite database file.</p> required Source code in <code>nest/core/database/orm_config.py</code> <pre><code>def __init__(self, db_name: str):\n\"\"\"\n    Initializes the SQLiteConfig instance.\n    Args:\n        db_name (str): The name of the SQLite database file.\n    \"\"\"\nself.db_name = db_name\n</code></pre>"},{"location":"database/#nest.core.database.orm_config.SQLiteConfig.get_engine_url","title":"<code>get_engine_url()</code>","text":"<p>Returns the engine URL for the ORM.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The engine URL.</p> Source code in <code>nest/core/database/orm_config.py</code> <pre><code>def get_engine_url(self) -&gt; str:\n\"\"\"\n    Returns the engine URL for the ORM.\n    Returns:\n        str: The engine URL.\n    \"\"\"\nreturn f'sqlite:///{self.db_name}.db'\n</code></pre>"},{"location":"decorators/","title":"Decorators","text":""},{"location":"decorators/#nest.core.decorators.controller.Controller","title":"<code>Controller(tag=None)</code>","text":"<p>Decorator that turns a class into a controller, allowing you to define routes using FastAPI decorators.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>The tag to use for OpenAPI documentation.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>class</code> <p>The decorated class.</p> Source code in <code>nest/core/decorators/controller.py</code> <pre><code>def Controller(tag: str = None):\n\"\"\"\n    Decorator that turns a class into a controller, allowing you to define routes using FastAPI decorators.\n    Args:\n        tag (str, optional): The tag to use for OpenAPI documentation.\n    Returns:\n        class: The decorated class.\n    \"\"\"\ndef wrapper(cls):\nrouter = InferringRouter(tags=[tag] if tag else None)\nfor name, method in cls.__dict__.items():\nif callable(method) and hasattr(method, \"method\"):\nif not method.__path__:\nraise Exception(\"Missing path\")\nelse:\nif not method.__path__.startswith(\"/\"):\nmethod.__path__ = \"/\" + method.__path__\nif method.method == \"GET\":\nrouter.add_api_route(method.__path__, method, methods=[\"GET\"], **method.__kwargs__)\nelif method.method == \"POST\":\nrouter.add_api_route(method.__path__, method, methods=[\"POST\"], **method.__kwargs__)\nelif method.method == \"PUT\":\nrouter.add_api_route(method.__path__, method, methods=[\"PUT\"], **method.__kwargs__)\nelif method.method == \"DELETE\":\nrouter.add_api_route(method.__path__, method, methods=[\"DELETE\"], **method.__kwargs__)\nelif method.method == \"PATCH\":\nrouter.add_api_route(method.__path__, method, methods=[\"PATCH\"], **method.__kwargs__)\nelse:\nraise Exception(\"Invalid method\")\ndef get_router():\n\"\"\"\n            Returns the router associated with the controller.\n            Returns:\n                InferringRouter: The router associated with the controller.\n            \"\"\"\nreturn router\ncls.get_router = get_router\nreturn ClassBasedView(router=router, cls=cls)\nreturn wrapper\n</code></pre>"},{"location":"decorators/#nest.core.decorators.controller.Delete","title":"<code>Delete(path, **kwargs)</code>","text":"<p>Decorator that defines a DELETE route for the controller.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The URL path for the route.</p> required <code>**kwargs</code> <p>Additional keyword arguments to configure the route.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>function</code> <p>The decorated function.</p> Source code in <code>nest/core/decorators/controller.py</code> <pre><code>def Delete(path: str, **kwargs):\n\"\"\"\n    Decorator that defines a DELETE route for the controller.\n    Args:\n        path (str): The URL path for the route.\n        **kwargs: Additional keyword arguments to configure the route.\n    Returns:\n        function: The decorated function.\n    \"\"\"\ndef decorator(func):\nfunc.method = \"DELETE\"\nfunc.__path__ = path\nfunc.__kwargs__ = kwargs\nreturn func\nreturn decorator\n</code></pre>"},{"location":"decorators/#nest.core.decorators.controller.Get","title":"<code>Get(path, **kwargs)</code>","text":"<p>Decorator that defines a GET route for the controller.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The URL path for the route.</p> required <code>**kwargs</code> <p>Additional keyword arguments to configure the route.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>function</code> <p>The decorated function.</p> Source code in <code>nest/core/decorators/controller.py</code> <pre><code>def Get(path: str, **kwargs):\n\"\"\"\n    Decorator that defines a GET route for the controller.\n    Args:\n        path (str): The URL path for the route.\n        **kwargs: Additional keyword arguments to configure the route.\n    Returns:\n        function: The decorated function.\n    \"\"\"\ndef decorator(func):\nfunc.method = \"GET\"\nfunc.__path__ = path\nfunc.__kwargs__ = kwargs\nreturn func\nreturn decorator\n</code></pre>"},{"location":"decorators/#nest.core.decorators.controller.Patch","title":"<code>Patch(path, **kwargs)</code>","text":"<p>Decorator that defines a PATCH route for the controller.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The URL path for the route.</p> required <code>**kwargs</code> <p>Additional keyword arguments to configure the route.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>function</code> <p>The decorated function.</p> Source code in <code>nest/core/decorators/controller.py</code> <pre><code>def Patch(path: str, **kwargs):\n\"\"\"\n    Decorator that defines a PATCH route for the controller.\n    Args:\n        path (str): The URL path for the route.\n        **kwargs: Additional keyword arguments to configure the route.\n    Returns:\n        function: The decorated function.\n    \"\"\"\ndef decorator(func):\nfunc.method = \"PATCH\"\nfunc.__path__ = path\nfunc.__kwargs__ = kwargs\nreturn func\nreturn decorator\n</code></pre>"},{"location":"decorators/#nest.core.decorators.controller.Post","title":"<code>Post(path, **kwargs)</code>","text":"<p>Decorator that defines a POST route for the controller.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The URL path for the route.</p> required <code>**kwargs</code> <p>Additional keyword arguments to configure the route.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>function</code> <p>The decorated function.</p> Source code in <code>nest/core/decorators/controller.py</code> <pre><code>def Post(path: str, **kwargs):\n\"\"\"\n    Decorator that defines a POST route for the controller.\n    Args:\n        path (str): The URL path for the route.\n        **kwargs: Additional keyword arguments to configure the route.\n    Returns:\n        function: The decorated function.\n    \"\"\"\ndef decorator(func):\nfunc.method = \"POST\"\nfunc.__path__ = path\nfunc.__kwargs__ = kwargs\nreturn func\nreturn decorator\n</code></pre>"},{"location":"decorators/#nest.core.decorators.controller.Put","title":"<code>Put(path, **kwargs)</code>","text":"<p>Decorator that defines a PUT route for the controller.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The URL path for the route.</p> required <code>**kwargs</code> <p>Additional keyword arguments to configure the route.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>function</code> <p>The decorated function.</p> Source code in <code>nest/core/decorators/controller.py</code> <pre><code>def Put(path: str, **kwargs):\n\"\"\"\n    Decorator that defines a PUT route for the controller.\n    Args:\n        path (str): The URL path for the route.\n        **kwargs: Additional keyword arguments to configure the route.\n    Returns:\n        function: The decorated function.\n    \"\"\"\ndef decorator(func):\nfunc.method = \"PUT\"\nfunc.__path__ = path\nfunc.__kwargs__ = kwargs\nreturn func\nreturn decorator\n</code></pre>"},{"location":"decorators/#nest.core.decorators.database.db_request_handler","title":"<code>db_request_handler(func)</code>","text":"<p>Decorator that handles database requests, including error handling and session management.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>function</code> <p>The function to be decorated.</p> required <p>Returns:</p> Name Type Description <code>function</code> <p>The decorated function.</p> Source code in <code>nest/core/decorators/database.py</code> <pre><code>def db_request_handler(func):\n\"\"\"\n    Decorator that handles database requests, including error handling and session management.\n    Args:\n        func (function): The function to be decorated.\n    Returns:\n        function: The decorated function.\n    \"\"\"\ndef wrapper(self, *args, **kwargs):\ntry:\nresult = func(self, *args, **kwargs)\nself.session.close()\nreturn result\nexcept Exception as e:\nself.session.rollback()\nself.session.close()\nreturn HTTPException(status_code=500, detail=str(e))\nreturn wrapper\n</code></pre>"},{"location":"installation/","title":"Getting Started","text":"<p>To get started with PyNest, you'll need to install it using pip:</p> <pre><code>pip install PyNest\n</code></pre>"},{"location":"installation/#start-with-cli","title":"Start with cli","text":""},{"location":"installation/#create-a-new-project","title":"Create a new project","text":"<pre><code>nest create-nest-app -n my_app_name\n</code></pre> <p>this command will create a new project with the following structure:</p> <pre><code>\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 orm_config.py\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 src\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 examples\n\u2502    \u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u2502    \u251c\u2500\u2500 examples_controller.py\n\u2502    \u2502    \u251c\u2500\u2500 examples_service.py\n\u2502    \u2502    \u251c\u2500\u2500 examples_model.py\n\u2502    \u251c\u2500\u2500  \u251c\u2500\u2500 examples_entity.py\n\u2502    \u251c\u2500\u2500  \u251c\u2500\u2500 examples_module.py\n</code></pre> <p>once you have created your app, get into the folder and run the following command:</p> <pre><code>cd my_app_name\n</code></pre> <p>run the server with the following command:</p> <pre><code>uvicorn \"app:app\" --host \"0.0.0.0\" --port \"80\" --reload\n</code></pre> <p>Now you can visit OpenAPI in your browser to see the default API documentation.</p>"},{"location":"installation/#adding-modules","title":"Adding modules","text":"<p>To add a new module to your application, you can use the nest generate module command:</p> <pre><code>nest generate-module -n users\n</code></pre> <p>This will create a new module called <code>users</code> in your application with the following structure:</p> <pre><code>\u251c\u2500\u2500 users\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 users_controller.py\n\u2502    \u251c\u2500\u2500 users_service.py\n\u2502    \u251c\u2500\u2500 users_model.py\n\u2502    \u251c\u2500\u2500 users_entity.py\n\u2502    \u251c\u2500\u2500 users_module.py\n</code></pre> <p>The users module will immediately register itself with the application and will be available for use.</p> <p>You can then start defining routes and other application components using decorators and other PyNest constructs.</p>"},{"location":"installation/#starting-a-new-project-manually","title":"Starting a new project manually","text":"<pre><code>NOTICE: for the following example, we will use the products module. \n</code></pre> <p>To start a new project manually, you'll need to create a project that follows this structure:</p> <pre><code>\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 orm_config.py\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 src\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 examples\n\u2502    \u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u2502    \u251c\u2500\u2500 products_controller.py\n\u2502    \u2502    \u251c\u2500\u2500 products_service.py\n\u2502    \u2502    \u251c\u2500\u2500 products_model.py\n\u2502    \u251c\u2500\u2500  \u251c\u2500\u2500 products_entity.py\n\u2502    \u251c\u2500\u2500  \u251c\u2500\u2500 products_module.py\n</code></pre> <p>Explanation: This is the directory structure for your project. It includes the main files and a src directory that contains your project's source code.</p>"},{"location":"installation/#creating-the-files","title":"Creating the files","text":""},{"location":"installation/#mainpy","title":"main.py","text":"<pre><code>import uvicorn\nif __name__ == '__main__':\nuvicorn.run(\n'app:app',\nhost=\"0.0.0.0\",\nport=80,\n)\n</code></pre> <p>This is the main.py file, which is responsible for running your application using the Uvicorn server.  It imports the uvicorn library and starts the server with the specified host and port.</p>"},{"location":"installation/#apppy","title":"app.py","text":"<pre><code>from orm_config import config\nfrom nest.core import App\nfrom src.products.products_module import ProductsModule\napp = App(\ndescription=\"Your app description\",\nmodules=[\nProductsModule\n],\ninit_db=config.create_all\n)\n</code></pre> <p>This is the app.py file, which is the entry point for your application. It imports necessary modules and sets up the App object with a description and the ProductsModule.  It also initializes the database using the config.create_all function.</p>"},{"location":"installation/#orm_configpy","title":"orm_config.py","text":"<pre><code>from nest.core import OrmService\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\nconfig = OrmService(\ndb_type=\"your_db_type\",\nconfig_params=dict(\nuser=os.getenv(\"DB_USER\"),\npassword=os.getenv(\"DB_PASSWORD\"),\nhost=os.getenv(\"DB_HOST\"),\nport=os.getenv(\"DB_PORT\"),\ndatabase=os.getenv(\"DB_NAME\"),\n),\n)\n</code></pre> <p>This is the orm_config.py file, which contains the configuration for your ORM (Object-Relational Mapping) service.</p> <p>It imports necessary libraries, loads environment variables using dotenv, and creates an OrmService object with the specified database type and configuration parameters.</p> <p>Once we set up this 3 files, we can start creating our modules. each module is a folder with the following structure:</p> <pre><code>\u251c\u2500\u2500 products\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 products_controller.py\n\u2502    \u251c\u2500\u2500 products_service.py\n\u2502    \u251c\u2500\u2500 products_model.py\n|    \u251c\u2500\u2500 products_entity.py\n\u2502    \u251c\u2500\u2500 products_module.py\n</code></pre> <p>This is the structure of a module folder. It includes an init.py file to make the folder a Python package,  As well as specific files for the module's controller, service, model, entity, and module configurations.</p>"},{"location":"installation/#products_modelpy","title":"products_model.py","text":"<pre><code>from pydantic import BaseModel\nclass Product(BaseModel):\nname: str\nprice: float\ndescription: str\n</code></pre> <p>This is the products_model.py file, which defines the Product model using the BaseModel class from the pydantic library.  The model represents the structure and attributes of a product.</p>"},{"location":"installation/#products_entitypy","title":"products_entity.py","text":"<pre><code>from sqlalchemy import Column, Integer, String, Float\nfrom orm_config import config\nclass Product(config.Base):\n__tablename__ = \"products\"\nid = Column(Integer, primary_key=True, index=True, autoincrement=True)\nname = Column(String)\nprice = Column(Float)\ndescription = Column(String)\n</code></pre> <p>This is the products_entity.py file, which defines the Product entity using SQLAlchemy.   It imports necessary modules and inherits from the config.Base class. The entity represents the database table for storing products, with columns for id, name, price, and description.</p>"},{"location":"installation/#products_servicepy","title":"products_service.py","text":"<pre><code>from src.products.products_model import Product\nfrom src.products.products_entity import Product as ProductEntity\nfrom orm_config import config\nfrom nest.core.decorators import db_request_handler\nclass ProductsService:\ndef __init__(self):\nself.config = config\nself.session = self.config.get_db()\n@db_request_handler\ndef add_product(self, product: Product):\nproduct_entity = ProductEntity(\nname=product.name,\nprice=product.price,\ndescription=product.description\n)\nself.session.add(product_entity)\nself.session.commit()\nreturn product_entity.id\n@db_request_handler\ndef get_products(self):\nreturn self.session.query(ProductEntity).all()\n@db_request_handler\ndef get_product(self, product_id: int):\nreturn self.session.query(ProductEntity).filter(ProductEntity.id == product_id).first()\n@db_request_handler\ndef last_product(self):\nreturn self.session.query(ProductEntity).order_by(ProductEntity.id.desc()).first()\n</code></pre> <p>This is the service file, which contains the ProductsService class. It imports necessary modules and defines methods for interacting with the database.   The methods include adding a product, getting all products, getting a specific product by ID, and retrieving the last added product.  The <code>@db_request_handler</code> decorator is responsible for managing the database session and handling any exceptions that may occur during database operations.</p>"},{"location":"installation/#products_controllerpy","title":"products_controller.py","text":"<p><pre><code>from nest.core import Depends, Controller, Get, Post\nfrom src.products.products_service import ProductsService\nfrom src.products.products_model import Product\n@Controller(\"products\")\nclass ProductsController:\nservice: ProductsService = Depends(ProductsService)\n@Get(\"/get_products\")\ndef get_products(self):\nreturn self.service.get_products()\n@Get(\"/get_product/{product_id}\")\ndef get_product(self, product_id: int):\nreturn self.service.get_product(product_id)\n@Post(\"/add_product\")\ndef add_product(self, product: Product):\nreturn self.service.add_product(product)\n@Get(\"/last_product\")\ndef last_product(self):\nreturn self.service.last_product()\n</code></pre> In summary, the <code>decorators</code> and the <code>Depends</code> class are used to define routes and HTTP methods for the  <code>ProductsController</code> class, and to inject the <code>ProductsService</code> dependency into the service attribute of the controller.  This allows the controller to handle incoming requests and interact with  The service to perform specific actions based on the routes and methods defined.</p>"},{"location":"installation/#products_modulepy","title":"products_module.py","text":"<pre><code>from src.products.products_controller import ProductsController\nfrom src.products.products_service import ProductsService\nclass ProductsModule:\ndef __init__(self):\nself.providers = [ProductsService]\nself.controllers = [ProductsController]\n</code></pre> <p>This module can be registered and used in your application. Once the module is registered, the controller routes will be available at the specified path.</p> <p>This 5 components are the minimum required to create a module that works with the ORM. There are many more options of how you can design your modules and which databases you can use, but this is the default basic structure.</p>"},{"location":"license/","title":"License","text":"<p>PyNest is MIT licensed.</p>"}]}